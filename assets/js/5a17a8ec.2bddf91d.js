"use strict";(self.webpackChunkopenpathfinder_com=self.webpackChunkopenpathfinder_com||[]).push([[1326],{54:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"projects/visionBoard/database_management","title":"Database Management","description":"This project requires a PostgreSQL instance to store and query data. Some commands do not require this dependency. The project uses Knex to handle database connections and maintenance activities, such as seeds, migrations, and rollback of changes.","source":"@site/docs/projects/visionBoard/database_management.md","sourceDirName":"projects/visionBoard","slug":"/visionBoard/database-management","permalink":"/docs/visionBoard/database-management","draft":false,"unlisted":false,"editUrl":"https://github.com/openPathfinder/openpathfinder.com/tree/main/packages/create-docusaurus/templates/shared/docs/projects/visionBoard/database_management.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9,"title":"Database Management","slug":"/visionBoard/database-management"},"sidebar":"tutorialSidebar","previous":{"title":"Report Management","permalink":"/docs/visionBoard/report-management"},"next":{"title":"Checks","permalink":"/docs/visionBoard/Checks"}}');var t=s(4848),i=s(8453);const r={sidebar_position:9,title:"Database Management",slug:"/visionBoard/database-management"},o=void 0,d={},c=[{value:"Schema Management",id:"schema-management",level:2},{value:"Migrations",id:"migrations",level:2},{value:"Seeding",id:"seeding",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This project requires a PostgreSQL instance to store and query data. Some commands do not require this dependency. The project uses ",(0,t.jsx)(n.a,{href:"https://knexjs.org/",children:"Knex"})," to handle database connections and maintenance activities, such as ",(0,t.jsx)(n.a,{href:"https://knexjs.org/guide/migrations.html#seed-files",children:"seeds"}),", ",(0,t.jsx)(n.a,{href:"https://knexjs.org/guide/migrations.html",children:"migrations"}),", and ",(0,t.jsx)(n.a,{href:"https://knexjs.org/guide/migrations.html#rollback",children:"rollback"})," of changes."]}),"\n",(0,t.jsx)(n.p,{children:"Knex works transparently for most users, but if you want to contribute by solving a bug or adding a new feature, it\u2019s important to be familiar with these steps."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["These commands are relevant only for ",(0,t.jsx)(n.a,{href:"/docs/visionBoard/installation#from-source-code",children:"local development"})," using npm. They are not applicable when using Docker."]})}),"\n",(0,t.jsx)(n.h2,{id:"schema-management",children:"Schema Management"}),"\n",(0,t.jsx)(n.p,{children:"Schema management involves maintaining the database structure. Use the following commands:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Check the schema"}),": Refer to the latest schema file at ",(0,t.jsx)(n.a,{href:"https://github.com/OpenPathfinder/visionBoard/blob/main/src/database/schema/schema.sql",children:"/src/database/schema/schema.sql"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Update the schema"}),": Generate a new schema file based on the current database state:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run db:generate-schema\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This ensures the schema file reflects the latest changes applied to the database."}),"\n",(0,t.jsx)(n.h2,{id:"migrations",children:"Migrations"}),"\n",(0,t.jsx)(n.p,{children:"Migrations manage incremental changes to the database schema, ensuring consistency across environments. Use these commands:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Run latest migrations"}),": Apply all pending migrations to update the database schema:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run db:migrate\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Rollback migrations"}),": Undo the most recent migration:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run db:rollback\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Rollbacks are useful for undoing changes if a migration introduces unintended issues."}),"\n",(0,t.jsx)(n.h2,{id:"seeding",children:"Seeding"}),"\n",(0,t.jsx)(n.p,{children:"Seeding populates the database with predefined data, which is especially useful for testing or development environments:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Seed the database"}),": Populate the database with seed data:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run db:seed\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on seeding, refer to the ",(0,t.jsx)(n.a,{href:"https://knexjs.org/guide/migrations.html#seed-files",children:"Knex documentation"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["If you encounter any issues with these commands, ensure your database connection is configured correctly and verify that the necessary environment variables are set. Check the ",(0,t.jsx)(n.a,{href:"/docs/visionBoard/configuration",children:"Configuration guide"})," for additional information."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var a=s(6540);const t={},i=a.createContext(t);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);